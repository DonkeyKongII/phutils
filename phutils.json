{
    "appid": "f006b969-7253-423f-85df-db0f708826b7",
    "name": "Phantom Utilities",
    "description": "Common utility actions for phantom playbook use.",
    "publisher": "Phantom",
    "type": "Generic",
    "main_module": "phutils_connector.pyc",
    "app_version": "1.0.1",
    "utctime_updated": "2018-03-09T00:17:26.000000Z",
    "package_name": "phantom_utilities",
    "product_vendor": "Phantom",
    "product_name": "Phantom Common Actions",
    "product_version_regex": ".*",
    "min_phantom_version": "3.5.188",
    "logo": "logo_phantom.svg",
    "logo_dark": "logo_phantom_dark.svg",
    "license": "Copyright (c) 2018 Splunk Inc.",
    "configuration": {
        "base_url": {
            "data_type": "string",
            "order": 0,
            "description": "Phantom IP/Hostname",
            "required": true
        },
        "auth_token": {
            "data_type": "password",
            "order": 1,
            "description": "Phantom API Key"
        },
        "username": {
            "data_type": "string",
            "order": 2,
            "description": "Phantom Username"
        },
        "password": {
            "data_type": "password",
            "order": 3,
            "description": "Phantom Password"
        },
        "verify_certificate": {
            "data_type": "boolean",
            "order": 4,
            "description": "Verify Server Certificate"
        }
    },
    "pip_dependencies": {
        "wheel": [
            {
                "module": "python-dateutil",
                "input_file": "wheels/python_dateutil-2.7.3-py2.py3-none-any.whl"
            }
        ]
    },
    "actions": [
        {
            "action": "test connectivity",
            "description": "Tests connectivity to the Phantom REST API.",
            "type": "test",
            "identifier": "test_connectivity",
            "read_only": true,
            "parameters": {},
            "output": [],
            "versions": "EQ(*)"
        },
        {
            "action": "format string",
            "description": "Formats input data.",
            "verbose": "Can be used with or without regex. If no regex, then just used to add text around existing string (i.e. create a query that uses a parameter from the existing datapath). If regex, findall is leveraged to find all specified groups. In either case, string format notation is used for modification (use {0} {1} {2}... etc for creating the new string).<br /><br />If no regex and the output_string is 'I love {1}', and the string_to_format is 'Phantom', the resulting string is 'I love Phantom'.",
            "type": "generic",
            "identifier": "format_string",
            "read_only": true,
            "parameters": {
                "string_to_format": {
                    "description": "string to format",
                    "data_type": "string",
                    "required": true,
                    "primary": true,
                    "order": 0
                },
                "output_string": {
                    "description": "output string",
                    "data_type": "string",
                    "required": true,
                    "order": 1
                },
                "regex": {
                    "description": "regex",
                    "data_type": "string",
                    "default": "",
                    "order": 2
                },
                "ignore_case": {
                    "description": "ignore case",
                    "data_type": "boolean",
                    "default": true,
                    "order": 3
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.output_string",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.regex",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.string_to_format",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.string_found",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.data.*.formatted_string",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message",
                    "column_order": 2
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "modify date",
            "description": "Modify Date",
            "verbose": "To leverage today's date type 'now' in the date_value field'.<br /><br />Only use date_format_input if absolutely necessary. In general, almost all types should be able to be parsed without needing to specify the format.",
            "type": "generic",
            "identifier": "modify_date",
            "read_only": true,
            "parameters": {
                "date_value": {
                    "description": "Date Value",
                    "data_type": "string",
                    "required": true,
                    "order": 0
                },
                "date_format_input": {
                    "description": "Input Format",
                    "data_type": "string",
                    "order": 1
                },
                "mod_units": {
                    "description": "Date Modification Units",
                    "data_type": "string",
                    "value_list": [
                        "microseconds",
                        "seconds",
                        "minutes",
                        "hours",
                        "days",
                        "weeks",
                        "months",
                        "years"
                    ],
                    "order": 2
                },
                "mod_value": {
                    "description": "Date Modification Value",
                    "data_type": "numeric",
                    "order": 3
                },
                "date_format_output": {
                    "description": "Output Format",
                    "data_type": "string",
                    "order": 4
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.date_format_input",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.date_format_output",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.date_value",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.mod_units",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.mod_value",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.date_string",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.timestamp",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message",
                    "column_order": 2
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "replace partial string",
            "description": "Replaces parts of a string.",
            "type": "generic",
            "identifier": "replace_partial_string",
            "read_only": true,
            "parameters": {
                "target_string": {
                    "description": "Target String",
                    "data_type": "string",
                    "required": true,
                    "order": 0
                },
                "find": {
                    "description": "Find",
                    "data_type": "string",
                    "required": true,
                    "order": 1
                },
                "replace": {
                    "description": "Replace",
                    "data_type": "string",
                    "required": false,
                    "order": 2
                },
                "ignore_case": {
                    "description": "Ignore Case",
                    "data_type": "boolean",
                    "order": 3
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.find",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.ignore_case",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.parameter.replace",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.target_string",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.replaced_string",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message",
                    "column_order": 2
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "hash text",
            "description": "Gets md5, sha1, and sha256 hash of given text.",
            "verbose": "",
            "type": "generic",
            "identifier": "hash_text",
            "read_only": true,
            "parameters": {
                "text": {
                    "description": "Text",
                    "required": true,
                    "data_type": "string",
                    "order": 0
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.text",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.md5",
                    "data_type": "string",
                    "contains": ["fileHash", "md5"]
                },
                {
                    "data_path": "action_result.data.*.sha1",
                    "data_type": "string",
                    "contains": ["fileHash", "sha1"]
                },
                {
                    "data_path": "action_result.data.*.sha256",
                    "data_type": "string",
                    "contains": ["fileHash", "sha256"]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "multi collect",
            "description": "Collects artifact fields from multiple datapaths",
            "verbose": "An example of when to use this - external IP data is in sourceAddress and destinationAddress and an IP reputation check is needed on both. Multi collect them into one field and then pass the resulting multi-collected field into Virus Total",
            "type": "generic",
            "identifier": "multi_collect",
            "read_only": true,
            "parameters": {
                "container_id": {
                    "description": "Container ID",
                    "required": true,
                    "data_type": "numeric",
                    "order": 0
                },
                "data_paths": {
                    "description": "Data Paths (comma separated)",
                    "required": true,
                    "data_type": "string",
                    "order": 1
                },
                "field_name": {
                    "description": "Output Field Name",
                    "required": true,
                    "data_type": "string",
                    "default": "",
                    "order": 2
                },
                "de_dupe": {
                    "description": "De-duplicate",
                    "required": false,
                    "data_type": "boolean",
                    "default": "",
                    "order": 3
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.data_paths",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.field_name",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.added_data.artifact_ids.*.artifact_id",
                    "data_type": "numeric"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "add to datapath",
            "description": "Adds data to datapath",
            "verbose": "Use data_list if you want to add one or several values to the datapath that are all of the same type.<br /><br />Example:<br/>Adding three IPs to the datapath would be performed like so - data_list='[\"1.1.1.1\",\"2.2.2.2\",\"8.8.8.8\"]', data_type='string', contains='ip'.<br /><br />If you want to add multiple values to the datapath that are of different types use data_dict. Data_list and data_dict cannot be used together.<br /><br />Example:<br/>To add a string and an IP to the datapath set data_dict to '[{\"data\": \"8.8.8.8\", \"data_type\": \"string\", \"contains\": \"ip\"}, {\"data\": \"some string\", \"data_type\": \"string\"}].<br /><br />If a field_name parameter is provided that field_name will be used for the datapath output, otherwise 'added_field' will be used.",
            "type": "generic",
            "identifier": "add_to_datapath",
            "read_only": true,
            "parameters": {
                "data_list": {
                    "description": "List of data elements",
                    "data_type": "string",
                    "order": 0
                },
                "data_type": {
                    "description": "Date Type",
                    "data_type": "string",
                    "default": "",
                    "value_list": [
                        "",
                        "string",
                        "numeric",
                        "boolean"
                    ],
                    "order": 1
                },
                "contains": {
                    "description": "Contains Type",
                    "data_type": "string",
                    "order": 2
                },
                "data_dict": {
                    "description": "List of Dicts",
                    "data_type": "string",
                    "order": 3
                },
                "field_name": {
                    "description": "Field Name",
                    "data_type": "string",
                    "order": 4
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.contains",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.data_dict",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.data_list",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.data_type",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.field_name",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.string",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.numeric",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.boolean",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message",
                    "column_order": 2
                }
            ],
            "versions": "EQ(*)"
        }
    ]
}