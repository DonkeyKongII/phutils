{
    "appid": "f006b969-7253-423f-85df-db0f708826b7",
    "name": "Phantom Utilities",
    "description": "Common utility actions for phantom playbook use",
    "publisher": "Phantom",
    "type": "Generic",
    "main_module": "phutils_connector.pyc",
    "app_version": "1.0.1",
    "utctime_updated": "2018-03-09T00:17:26.000000Z",
    "package_name": "phantom_utilities",
    "product_vendor": "Phantom",
    "product_name": "Phantom Common Actions",
    "product_version_regex": ".*",
    "min_phantom_version": "3.5.188",
    "logo": "logo_phantom.svg",
    "logo_dark": "logo_phantom_dark.svg",
    "license": "Copyright (c) 2018-2019 Splunk Inc.",
    "configuration": {
        "base_url": {
            "data_type": "string",
            "order": 0,
            "description": "Phantom IP/Hostname",
            "required": true
        },
        "auth_token": {
            "data_type": "password",
            "order": 1,
            "description": "Phantom API Key"
        },
        "username": {
            "data_type": "string",
            "order": 2,
            "description": "Phantom Username"
        },
        "password": {
            "data_type": "password",
            "order": 3,
            "description": "Phantom Password"
        },
        "verify_certificate": {
            "data_type": "boolean",
            "order": 4,
            "description": "Verify Server Certificate",
            "default": true
        }
    },
    "pip_dependencies": {
        "wheel": [
            {
                "module": "python-dateutil",
                "input_file": "wheels/python_dateutil-2.7.3-py2.py3-none-any.whl"
            },
            {
                "module": "py-expression-eval",
                "input_file": "wheels/py_expression_eval-0.3.5-py2.py3-none-any.whl"
            }
        ]
    },
    "actions": [
        {
            "action": "test connectivity",
            "description": "Tests connectivity to the Phantom REST API",
            "type": "test",
            "identifier": "test_connectivity",
            "read_only": true,
            "parameters": {},
            "output": [],
            "versions": "EQ(*)"
        },
        {
            "action": "change encoding",
            "description": "Change encoding of text (e.g. utf-8, latin-1, etc.)",
            "type": "generic",
            "identifier": "change_encoding",
            "read_only": true,
            "parameters": {
                "text": {
                    "description": "text to encode",
                    "data_type": "string",
                    "required": true,
                    "primary": true
                },
                "encoding": {
                    "description": "encoding to use",
                    "data_type": "string",
                    "required": true
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.encoding",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.text",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.encoded_text",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "modify string",
            "description": "modifies a string",
            "type": "generic",
            "identifier": "modify_string",
            "read_only": false,
            "parameters": {
                "string": {
                    "description": "string",
                    "data_type": "numeric",
                    "required": true,
                    "primary": true
                },
                "action": {
                    "description": "update data",
                    "data_type": "string",
                    "required": true,
                    "value_list": [
                        "upper",
                        "lower"
                    ]
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.action",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.string",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.modified_string",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "update container",
            "description": "Update container fields",
            "type": "generic",
            "identifier": "update_container",
            "read_only": false,
            "parameters": {
                "container_id": {
                    "description": "container_id",
                    "data_type": "numeric",
                    "required": true,
                    "primary": true
                },
                "data": {
                    "description": "update data",
                    "data_type": "string",
                    "required": true
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.container_id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.parameter.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "update artifact",
            "description": "Update artifact fields",
            "type": "generic",
            "identifier": "update_artifact",
            "read_only": false,
            "parameters": {
                "artifact_id": {
                    "description": "artifact_id",
                    "data_type": "numeric",
                    "required": true,
                    "primary": true
                },
                "data": {
                    "description": "update data",
                    "data_type": "string",
                    "required": true
                },
                "overwrite": {
                    "description": "overwrite existing",
                    "data_type": "boolean",
                    "required": false
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.artifact_id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.parameter.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.overwrite",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "modify indicator tag",
            "description": "modifies indicator tags",
            "type": "generic",
            "identifier": "add_indicator_tag",
            "read_only": false,
            "parameters": {
                "ioc_value": {
                    "description": "ioc value",
                    "data_type": "string",
                    "order": 0,
                    "required": false
                },
                "ioc_id": {
                    "description": "ioc id",
                    "data_type": "numeric",
                    "order": 1,
                    "required": false
                },
                "tags_to_add": {
                    "description": "tags to add (comma separated)",
                    "data_type": "string",
                    "order": 2,
                    "required": false
                },
                "tags_to_remove": {
                    "description": "tags to remove (comma separated)",
                    "data_type": "string",
                    "order": 3,
                    "required": false
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.ioc_id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.parameter.ioc_value",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.tags_to_add",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.tags_to_remove",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "get indicator",
            "description": "Adds tag to indicator",
            "type": "generic",
            "identifier": "get_indicator",
            "read_only": false,
            "parameters": {
                "ioc_value": {
                    "description": "ioc value",
                    "data_type": "string",
                    "order": 0,
                    "required": false
                },
                "ioc_id": {
                    "description": "ioc id",
                    "data_type": "numeric",
                    "order": 1,
                    "required": false
                },
                "include_artifact_data": {
                    "description": "include artifact data",
                    "data_type": "boolean",
                    "order": 2
                },
                "artifact_limit": {
                    "description": "artifact limit",
                    "data_type": "numeric",
                    "order": 3
                },
                "artifact_sort": {
                    "description": "artifact sort",
                    "data_type": "string",
                    "order": 4,
                    "value_list": [
                        "desc",
                        "asc"
                    ]
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.artifact_limit",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.parameter.artifact_sort",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.include_artifact_data",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.parameter.ioc_id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.parameter.ioc_value",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.tags",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.cef",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.cef_types",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.container",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.container_name",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.create_time",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.description",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.end_time",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.has_note",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.hash",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.in_case",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.ingest_app",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.kill_chain",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.label",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.name",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.owner",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.parent_artifact",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.parent_container",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.playbook_run",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.severity",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.source_data_identifier",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.start_time",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.tags",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.type",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.update_time",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.artifacts.*.version",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.earliest_time",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.latest_time",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.open_events",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.severity_counts.*.count",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.severity_counts.*.name",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.tags.*.tag",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.tenant",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.total_events",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.value",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.ioc_id",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.ioc_value",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.tags",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "make table",
            "description": "Make table",
            "type": "generic",
            "identifier": "make_table",
            "read_only": true,
            "parameters": {
                "container_id": {
                    "description": "Container ID",
                    "data_type": "numeric",
                    "order": 0
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.container_id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.parameter.data_dict",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.added_data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.items_added",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message",
                    "column_order": 2
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "parse url",
            "description": "Parses URL into 6 components (scheme, netloc, path, params, query, fragment) using Python urlparse",
            "type": "generic",
            "identifier": "parse_url",
            "read_only": true,
            "parameters": {
                "url_to_parse": {
                    "description": "url to parse",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ],
                    "required": true,
                    "primary": true
                }
            },
            "render": {
                "type": "table",
                "width": 2,
                "height": 5,
                "title": "Search Results"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.url_to_parse",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ],
                    "column_order": 0,
                    "column_name": "URL"
                },
                {
                    "data_path": "action_result.data.*.frament",
                    "data_type": "string",
                    "column_order": 6,
                    "column_name": "Fragment"
                },
                {
                    "data_path": "action_result.data.*.netloc",
                    "data_type": "string",
                    "column_order": 2,
                    "column_name": "Netloc"
                },
                {
                    "data_path": "action_result.data.*.params",
                    "data_type": "string",
                    "column_order": 4,
                    "column_name": "Params"
                },
                {
                    "data_path": "action_result.data.*.path",
                    "data_type": "string",
                    "column_order": 3,
                    "column_name": "Path"
                },
                {
                    "data_path": "action_result.data.*.query",
                    "data_type": "string",
                    "column_order": 5,
                    "column_name": "Query"
                },
                {
                    "data_path": "action_result.data.*.scheme",
                    "data_type": "string",
                    "column_order": 1,
                    "column_name": "Scheme"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "unshorten url",
            "description": "Returns unshortend URLs",
            "type": "generic",
            "identifier": "unshorten_url",
            "read_only": true,
            "parameters": {
                "url": {
                    "description": "url to unshorten",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ],
                    "required": true,
                    "primary": true
                }
            },
            "render": {
                "type": "table",
                "width": 2,
                "height": 5,
                "title": "Search Results"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.url",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ],
                    "column_order": 0,
                    "column_name": "Shortened URL"
                },
                {
                    "data_path": "action_result.data.*.unshortened_url",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ],
                    "column_order": 1,
                    "column_name": "Unshortened URL"
                },
                {
                    "data_path": "action_result.summary.unshortend_url",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "defang url",
            "description": "Returns defanged URLs",
            "type": "generic",
            "identifier": "defang_url",
            "read_only": true,
            "parameters": {
                "url": {
                    "description": "url to defang",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ],
                    "required": true,
                    "primary": true
                }
            },
            "render": {
                "type": "table",
                "width": 2,
                "height": 5,
                "title": "Search Results"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.url",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ],
                    "column_order": 0,
                    "column_name": "Fanged URL"
                },
                {
                    "data_path": "action_result.data.*.defanged_url",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ],
                    "column_order": 1,
                    "column_name": "Defanged URL"
                },
                {
                    "data_path": "action_result.summary.defanged_url",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "format string",
            "description": "Formats input data",
            "verbose": "Can be used with or without regex. If no regex, then just used to add text around existing string (i.e. create a query that uses a parameter from the existing datapath). If regex, findall is leveraged to find all specified groups. In either case, string format notation is used for modification (use {0} {1} {2}... etc for creating the new string).<br /><br />If no regex and the output_string is 'I love {1}', and the string_to_format is 'Phantom', the resulting string is 'I love Phantom'.",
            "type": "generic",
            "identifier": "format_string",
            "read_only": true,
            "parameters": {
                "string_to_format": {
                    "description": "string to format",
                    "data_type": "string",
                    "required": true,
                    "primary": true,
                    "order": 0
                },
                "output_string": {
                    "description": "output string",
                    "data_type": "string",
                    "required": true,
                    "order": 1
                },
                "regex": {
                    "description": "regex",
                    "data_type": "string",
                    "order": 2
                },
                "ignore_case": {
                    "description": "ignore case",
                    "data_type": "boolean",
                    "default": true,
                    "order": 3
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.ignore_case",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.parameter.output_string",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.regex",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.string_found",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.parameter.string_to_format",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.formatted_string",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message",
                    "column_order": 2
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "modify number",
            "description": "Performs mathematic operations against numbers",
            "verbose": "The number parameter is the number on which the mathematic operation should be performed. The expression is the express to evaluate - use 'format string' style syntax. Example: number = 4; expression = '{0} * 4'; result would be 16 (4 * 4 = 16). For a complete list of supported operations please refer to py-expression-eval documentation.",
            "type": "generic",
            "identifier": "modify_number",
            "read_only": true,
            "parameters": {
                "number": {
                    "description": "Number to modify",
                    "data_type": "string",
                    "required": false,
                    "primary": true,
                    "order": 0
                },
                "expression": {
                    "description": "Expression to evaluate",
                    "data_type": "string",
                    "required": true,
                    "order": 1
                },
                "default_number": {
                    "description": "Default number",
                    "data_type": "string",
                    "required": false,
                    "order": 2
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.default_number",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.expression",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.number",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.expression",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.result",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.summary.result",
                    "data_type": "numeric"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "split string",
            "description": "Splits a string based on delimiter and text qualifier (optional) in list of dictionaries",
            "type": "generic",
            "identifier": "split_string",
            "read_only": true,
            "parameters": {
                "string_to_split": {
                    "description": "String to split",
                    "data_type": "string",
                    "required": true,
                    "primary": true,
                    "order": 0
                },
                "delimiter": {
                    "description": "Delimiter",
                    "data_type": "string",
                    "required": true,
                    "order": 1
                },
                "qualifier": {
                    "description": "Text qualifier",
                    "data_type": "string",
                    "required": false,
                    "order": 2
                },
                "field_name": {
                    "description": "Output field name",
                    "data_type": "string",
                    "required": true,
                    "order": 3
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.delimiter",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.field_name",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.qualifier",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.string_to_split",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.result_dict",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.item_count",
                    "data_type": "numeric"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "convert list to dict",
            "description": "Converts a list to a list of of dictionaries objects",
            "verbose": "List can be submitted as a python list or a string representation of a list.",
            "type": "generic",
            "identifier": "convert_to_dict",
            "read_only": true,
            "parameters": {
                "list": {
                    "description": "String to split",
                    "data_type": "string",
                    "required": true,
                    "primary": true,
                    "order": 0
                },
                "field_name": {
                    "description": "Output field name",
                    "data_type": "string",
                    "required": true,
                    "order": 1
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.field_name",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.list",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.result_dict",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.item_count",
                    "data_type": "numeric"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "modify date",
            "description": "Modify Date",
            "verbose": "To leverage today's date type 'now' in the date_value field'.<br /><br />Only use date_format_input if absolutely necessary. In general, almost all types should be able to be parsed without needing to specify the format.",
            "type": "generic",
            "identifier": "modify_date",
            "read_only": true,
            "parameters": {
                "date_value": {
                    "description": "Date Value",
                    "data_type": "string",
                    "required": true,
                    "order": 0
                },
                "date_format_input": {
                    "description": "Input Format",
                    "data_type": "string",
                    "order": 1
                },
                "mod_units": {
                    "description": "Date Modification Units",
                    "data_type": "string",
                    "value_list": [
                        "microseconds",
                        "seconds",
                        "minutes",
                        "hours",
                        "days",
                        "weeks",
                        "months",
                        "years"
                    ],
                    "order": 2
                },
                "mod_value": {
                    "description": "Date Modification Value",
                    "data_type": "numeric",
                    "order": 3
                },
                "date_format_output": {
                    "description": "Output Format",
                    "data_type": "string",
                    "order": 4
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.date_format_input",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.date_format_output",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.date_value",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.mod_units",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.mod_value",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.date_string",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.timestamp",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message",
                    "column_order": 2
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "get pin",
            "description": "Gets pins from HUD",
            "verbose": "",
            "type": "generic",
            "identifier": "get_pin",
            "read_only": true,
            "parameters": {
                "container_id": {
                    "description": "ID of container",
                    "data_type": "numeric",
                    "order": 0,
                    "required": true,
                    "contains": [
                        "phantom container id"
                    ],
                    "primary": true
                },
                "query": {
                    "description": "Query to get specific pins",
                    "data_type": "string",
                    "order": 1,
                    "required": false
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.container_id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.parameter.query",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.container_id",
                    "data_type": "numeric",
                    "contains": [
                        "phantom container id"
                    ]
                },
                {
                    "data_path": "action_result.data.*.create_time",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.message",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.modified_time",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.pin_style",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.pin_type",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.playbook",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string"
                },
                {
                    "data_path": "summary.pins_found",
                    "data_type": "numeric"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "replace partial string",
            "description": "Replaces parts of a string",
            "type": "generic",
            "identifier": "replace_partial_string",
            "read_only": true,
            "parameters": {
                "target_string": {
                    "description": "Target String",
                    "data_type": "string",
                    "required": true,
                    "order": 0
                },
                "find": {
                    "description": "Find",
                    "data_type": "string",
                    "required": true,
                    "order": 1
                },
                "replace": {
                    "description": "Replace",
                    "data_type": "string",
                    "required": false,
                    "order": 2
                },
                "ignore_case": {
                    "description": "Ignore Case",
                    "data_type": "boolean",
                    "order": 3
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.find",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.ignore_case",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.parameter.replace",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.target_string",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.replaced_string",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message",
                    "column_order": 2
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "hash text",
            "description": "Gets md5, sha1, and sha256 hash of given text",
            "type": "generic",
            "identifier": "hash_text",
            "read_only": true,
            "parameters": {
                "text": {
                    "description": "Text",
                    "required": true,
                    "data_type": "string",
                    "order": 0
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.text",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.md5",
                    "data_type": "string",
                    "contains": [
                        "fileHash",
                        "md5"
                    ]
                },
                {
                    "data_path": "action_result.data.*.sha1",
                    "data_type": "string",
                    "contains": [
                        "fileHash",
                        "sha1"
                    ]
                },
                {
                    "data_path": "action_result.data.*.sha256",
                    "data_type": "string",
                    "contains": [
                        "fileHash",
                        "sha256"
                    ]
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "multi collect",
            "description": "Collects artifact fields from multiple datapaths",
            "verbose": "An example of when to use this - external IP data is in sourceAddress and destinationAddress and an IP reputation check is needed on both. Multi collect them into one field and then pass the resulting multi-collected field into Virus Total.",
            "type": "generic",
            "identifier": "multi_collect",
            "read_only": true,
            "parameters": {
                "container_id": {
                    "description": "Container ID",
                    "required": true,
                    "data_type": "numeric",
                    "order": 0
                },
                "data_paths": {
                    "description": "Data Paths (comma separated)",
                    "required": true,
                    "data_type": "string",
                    "order": 1
                },
                "field_name": {
                    "description": "Output Field Name",
                    "required": true,
                    "data_type": "string",
                    "default": "",
                    "order": 2
                },
                "de_dupe": {
                    "description": "De-duplicate",
                    "required": false,
                    "data_type": "boolean",
                    "default": "",
                    "order": 3
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.container_id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.parameter.data_paths",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.de_dupe",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.parameter.field_name",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.added_data.artifact_ids.*.artifact_id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "add to datapath",
            "description": "Adds data to datapath",
            "type": "generic",
            "identifier": "add_to_datapath",
            "read_only": true,
            "parameters": {
                "data_dict": {
                    "description": "List of Dicts",
                    "data_type": "string",
                    "order": 0
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.data_dict",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.added_data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.items_added",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "column_name": "Message",
                    "column_order": 2
                }
            ],
            "versions": "EQ(*)"
        }
    ]
}
